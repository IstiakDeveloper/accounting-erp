// app/resources/js/pages/account-group/create.tsx
import React, { FormEvent, useState, useEffect } from 'react';
import { Head, Link, useForm } from '@inertiajs/react';
import AppLayout from '@/layouts/app-layout';
import {
    FolderPlus,
    ChevronLeft,
    HelpCircle,
    Layers
} from 'lucide-react';

interface AccountGroup {
    id: number;
    business_id: number;
    name: string;
    parent_id: number | null;
    nature: string;
    affects_gross_profit: boolean;
    sequence: number;
    is_system: boolean;
    level: number;
}

interface Props {
    parent_groups: AccountGroup[];
    natures: {
        [key: string]: string;
    };
}

export default function AccountGroupCreate({ parent_groups, natures }: Props) {
    const { data, setData, post, processing, errors } = useForm<{
        name: string;
        parent_id: number | null;
        nature: string;
        affects_gross_profit: boolean;
        sequence: number;
    }>({
        name: '',
        parent_id: null,
        nature: 'assets',
        affects_gross_profit: false,
        sequence: 0,
    });

    // Selected parent nature
    const [parentNature, setParentNature] = useState<string | null>(null);

    // Update nature when parent changes
    useEffect(() => {
        if (data.parent_id) {
            const parent = parent_groups.find(group => group.id === data.parent_id);
            if (parent) {
                setParentNature(parent.nature);
                setData('nature', parent.nature);
            }
        } else {
            setParentNature(null);
        }
    }, [data.parent_id, parent_groups]);

    const handleSubmit = (e: FormEvent) => {
        e.preventDefault();
        post(route('account_group.store'));
    };

    // Format options with indentation for hierarchical display
    const formatOptionLabel = (group: AccountGroup) => {
        const indent = 'â€”'.repeat(group.level);
        return group.level > 0 ? `${indent} ${group.name}` : group.name;
    };

    // Get nature description
    const getNatureDescription = (nature: string) => {
        switch (nature) {
            case 'assets':
                return 'Resources owned by the business (e.g., Cash, Equipment)';
            case 'liabilities':
                return 'Obligations owed by the business (e.g., Loans, Accounts Payable)';
            case 'income':
                return 'Revenue generated by the business (e.g., Sales, Service Income)';
            case 'expense':
                return 'Costs incurred by the business (e.g., Rent, Salaries)';
            case 'equity':
                return 'Owner\'s interest in the business (e.g., Capital, Retained Earnings)';
            default:
                return '';
        }
    };

    return (
        <AppLayout title="Create Account Group">
            <Head title="Create Account Group" />

            <div className="mb-6">
                <Link
                    href={route('account_group.index')}
                    className="inline-flex items-center text-sm text-blue-600 hover:text-blue-700"
                >
                    <ChevronLeft className="w-4 h-4 mr-1" />
                    Back to Account Groups
                </Link>
            </div>

            <div className="bg-white rounded-lg shadow overflow-hidden">
                <div className="px-4 py-5 sm:p-6">
                    <h3 className="text-lg font-medium leading-6 text-slate-900">Create New Account Group</h3>
                    <p className="mt-1 text-sm text-slate-500">
                        Define the structure and behavior of this account group.
                    </p>

                    <form onSubmit={handleSubmit} className="mt-8 space-y-8">
                        <div className="grid grid-cols-1 gap-y-6 gap-x-6 sm:grid-cols-6">
                            <div className="sm:col-span-4">
                                <label htmlFor="name" className="block text-sm font-medium text-slate-700 mb-1">
                                    Group Name
                                </label>
                                <div className="relative rounded-md shadow-sm">
                                    <input
                                        type="text"
                                        name="name"
                                        id="name"
                                        required
                                        className={`block w-full py-3 px-4 border ${errors.name
                                                ? 'border-red-300 text-red-900 placeholder-red-300 focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-red-500'
                                                : 'border-slate-300 text-slate-900 focus:ring-2 focus:ring-blue-500 focus:border-blue-500'
                                            } rounded-lg shadow-sm text-sm transition-colors`}
                                        value={data.name}
                                        onChange={(e) => setData('name', e.target.value)}
                                    />
                                </div>
                                {errors.name && (
                                    <p className="mt-2 text-sm text-red-600">{errors.name}</p>
                                )}
                            </div>

                            <div className="sm:col-span-4">
                                <label htmlFor="parent_id" className="block text-sm font-medium text-slate-700 mb-1">
                                    Parent Group
                                </label>
                                <div className="relative rounded-md shadow-sm">
                                    <select
                                        id="parent_id"
                                        name="parent_id"
                                        className={`block w-full py-3 px-4 border ${errors.parent_id
                                                ? 'border-red-300 text-red-900 placeholder-red-300 focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-red-500'
                                                : 'border-slate-300 text-slate-900 focus:ring-2 focus:ring-blue-500 focus:border-blue-500'
                                            } rounded-lg shadow-sm text-sm transition-colors appearance-none bg-white`}
                                        value={data.parent_id || ''}
                                        onChange={(e) => setData('parent_id', e.target.value ? parseInt(e.target.value) : null)}
                                    >
                                        <option value="">None (Top Level)</option>
                                        {parent_groups.map((group) => (
                                            <option key={group.id} value={group.id}>
                                                {formatOptionLabel(group)}
                                            </option>
                                        ))}
                                    </select>
                                    <div className="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                                        <svg className="h-5 w-5 text-slate-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                            <path fillRule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clipRule="evenodd" />
                                        </svg>
                                    </div>
                                </div>
                                {errors.parent_id && (
                                    <p className="mt-2 text-sm text-red-600">{errors.parent_id}</p>
                                )}
                                <p className="mt-1.5 text-xs text-slate-500">
                                    If this is a sub-group, select the parent group. This will determine its position in the hierarchy.
                                </p>
                            </div>

                            <div className="sm:col-span-4">
                                <label htmlFor="nature" className="block text-sm font-medium text-slate-700 mb-1">
                                    Nature
                                </label>
                                <div className="relative rounded-md shadow-sm">
                                    <select
                                        id="nature"
                                        name="nature"
                                        required
                                        className={`block w-full py-3 px-4 border ${errors.nature
                                                ? 'border-red-300 text-red-900 placeholder-red-300 focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-red-500'
                                                : 'border-slate-300 text-slate-900 focus:ring-2 focus:ring-blue-500 focus:border-blue-500'
                                            } rounded-lg shadow-sm text-sm transition-colors appearance-none bg-white`}
                                        value={data.nature}
                                        onChange={(e) => setData('nature', e.target.value)}
                                        disabled={parentNature !== null}
                                    >
                                        {Object.entries(natures).map(([value, label]) => (
                                            <option key={value} value={value}>
                                                {label}
                                            </option>
                                        ))}
                                    </select>
                                    <div className="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                                        <svg className="h-5 w-5 text-slate-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                            <path fillRule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clipRule="evenodd" />
                                        </svg>
                                    </div>
                                </div>
                                {errors.nature && (
                                    <p className="mt-2 text-sm text-red-600">{errors.nature}</p>
                                )}
                                {parentNature !== null && (
                                    <p className="mt-1.5 text-xs text-amber-600">
                                        <HelpCircle className="inline-block w-3 h-3 mr-1" />
                                        Nature must match the parent group.
                                    </p>
                                )}
                                <p className="mt-1.5 text-xs text-slate-500">
                                    {getNatureDescription(data.nature)}
                                </p>
                            </div>

                            <div className="sm:col-span-4">
                                <div className="p-4 bg-slate-50 rounded-lg border border-slate-200">
                                    <div className="flex items-start">
                                        <div className="flex items-center h-5">
                                            <input
                                                id="affects_gross_profit"
                                                name="affects_gross_profit"
                                                type="checkbox"
                                                className="h-5 w-5 text-blue-600 focus:ring-blue-500 border-slate-300 rounded transition-colors"
                                                checked={data.affects_gross_profit}
                                                onChange={(e) => setData('affects_gross_profit', e.target.checked)}
                                            />
                                        </div>
                                        <div className="ml-3 text-sm">
                                            <label htmlFor="affects_gross_profit" className="font-medium text-slate-700">
                                                Affects Gross Profit
                                            </label>
                                            <p className="mt-1 text-slate-500">
                                                Enable this for income/expense groups that should be considered when calculating gross profit.
                                            </p>
                                        </div>
                                    </div>
                                    {errors.affects_gross_profit && (
                                        <p className="mt-2 text-sm text-red-600">{errors.affects_gross_profit}</p>
                                    )}
                                </div>
                            </div>

                            <div className="sm:col-span-2">
                                <label htmlFor="sequence" className="block text-sm font-medium text-slate-700 mb-1">
                                    Sequence
                                </label>
                                <div className="relative rounded-md shadow-sm">
                                    <input
                                        type="number"
                                        name="sequence"
                                        id="sequence"
                                        className={`block w-full py-3 px-4 border ${errors.sequence
                                                ? 'border-red-300 text-red-900 placeholder-red-300 focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-red-500'
                                                : 'border-slate-300 text-slate-900 focus:ring-2 focus:ring-blue-500 focus:border-blue-500'
                                            } rounded-lg shadow-sm text-sm transition-colors`}
                                        value={data.sequence}
                                        onChange={(e) => setData('sequence', parseInt(e.target.value))}
                                        min="0"
                                    />
                                </div>
                                {errors.sequence && (
                                    <p className="mt-2 text-sm text-red-600">{errors.sequence}</p>
                                )}
                                <p className="mt-1.5 text-xs text-slate-500">
                                    Determines the display order.
                                </p>
                            </div>
                        </div>

                        <div className="mt-8 pt-6 border-t border-slate-200 flex justify-end space-x-4">
                            <Link
                                href={route('account_group.index')}
                                className="bg-white py-3 px-5 border border-slate-300 rounded-lg shadow-sm text-sm font-medium text-slate-700 hover:bg-slate-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors"
                            >
                                Cancel
                            </Link>
                            <button
                                type="submit"
                                disabled={processing}
                                className="inline-flex justify-center py-3 px-5 border border-transparent shadow-sm text-sm font-medium rounded-lg text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-75 transition-colors"
                            >
                                Create Account Group
                            </button>
                        </div>
                    </form>
                </div>
            </div>

            <div className="mt-6 p-4 bg-blue-50 rounded-lg">
                <div className="flex">
                    <div className="flex-shrink-0">
                        <Layers className="h-5 w-5 text-blue-400" />
                    </div>
                    <div className="ml-3">
                        <h3 className="text-sm font-medium text-blue-800">Account Group Structure</h3>
                        <div className="mt-2 text-sm text-blue-700">
                            <ul className="list-disc space-y-1 pl-5">
                                <li>Account groups organize your ledger accounts into a logical structure.</li>
                                <li>Each group has a nature (Assets, Liabilities, Income, Expense, Equity) that determines how it affects your financial statements.</li>
                                <li>Sub-groups must have the same nature as their parent group.</li>
                                <li>The "Affects Gross Profit" option is typically used for direct income and cost of sales groups.</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </AppLayout>
    );
}
